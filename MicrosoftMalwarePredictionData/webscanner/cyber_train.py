import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import time
import psutil
import csv
from system_status import *

class CyberNN(nn.Module):

    def __init__(self, first_layer_size):
        super().__init__()
        second_layer_size = round(first_layer_size)
        third_layer_size = round(second_layer_size)
        self.fc1 = nn.Linear(in_features=first_layer_size, out_features=second_layer_size)
        self.fc2 = nn.Linear(in_features=second_layer_size, out_features=third_layer_size)
        self.out = nn.Linear(in_features=third_layer_size, out_features=1)

    def forward(self, t):
        t = t.flatten(start_dim=1)
        print(f'flattend tensor: {t}')
        t = F.relu(self.fc1(t))
        t = F.relu(self.fc2(t))
        t = self.out(t)
        return t

# class QValues():
    
#     @staticmethod
#     def get_current(policy_net, states, classification)
system_stats = SystemStatus(True)
print(0,psutil.cpu_percent(interval=None, percpu=False))
INPUT_LAYER_SIZE = 13
cyber_nn = CyberNN(INPUT_LAYER_SIZE)
optimizer = optim.Adam(params=cyber_nn.parameters(), lr=0.001)

with open('cybernn.csv','w',newline='') as file:
    fieldnames = ['cpu_percent0','cpu_percent1','cpu_percent2','cpu_percent3','cpu_time_percent0','cpu_time_percent1','cpu_time_percent2','cpu_frequency','cpu_avg_load0','cpu_avg_load1','cpu_avg_load2','network_packets_sent','network_packets_received']
    writer = csv.DictWriter(file,fieldnames=fieldnames)
    writer.writeheader()

    for i in range(100):
        network_packets_sent = 0
        network_packets_recv = 0
        initial_packets_count = system_stats.get_network_packets_sent()
        initial_recv_packets_count = system_stats.get_network_packets_received()

        cpu_percent = system_stats.get_cpu_percent()
        cpu_time_percent = system_stats.get_cpu_time_percent()
        cpu_frequency = system_stats.get_cpu_frequency()
        cpu_avg_load = system_stats.get_cpu_avg_load()
        print(0,torch.tensor(psutil.cpu_percent(interval=None, percpu=True)))
        print(1,cpu_percent)
        print(2,cpu_time_percent)
        print(3,cpu_frequency)
        print(4,cpu_avg_load)
        time.sleep(60)
        network_packets_sent = system_stats.get_network_packets_sent() - initial_packets_count
        network_packets_recv = system_stats.get_network_packets_received() - initial_recv_packets_count
        print(5,network_packets_sent)
        nn_input = torch.cat([cpu_percent,cpu_time_percent,cpu_frequency,cpu_avg_load,network_packets_sent,network_packets_recv])
        
        writer.writerow({'cpu_percent0':cpu_percent[0].item(),
                        'cpu_percent1':cpu_percent[1].item(),
                        'cpu_percent2':cpu_percent[2].item(),
                        'cpu_percent3':cpu_percent[3].item(),
                        'cpu_time_percent0':cpu_time_percent[0].item(),
                        'cpu_time_percent1':cpu_time_percent[1].item(),
                        'cpu_time_percent2':cpu_time_percent[2].item(),
                        'cpu_frequency':cpu_frequency.item(),
                        'cpu_avg_load0':cpu_avg_load[0].item(),
                        'cpu_avg_load1':cpu_avg_load[1].item(),
                        'cpu_avg_load2':cpu_avg_load[2].item(),
                        'network_packets_sent':network_packets_sent.item(),
                        'network_packets_received':network_packets_recv.item()})
        print(f'nn input: {nn_input}')
        print(f'i: {i}')

        # cyber_nn(nn_input)

        # loss = F.mse_loss(current_q_values, target_q_values.unsqueeze(1))
        # optimizer.zero_grad()
        # loss.backward()
        # optimizer.step()
        
print("Done running NN")

