"""
Let's web scrape for some cyber security related data that might be useful
Potential sites: https://nvd.nist.gov/
               : cvedetails
"""
import re
from requests import get
from bs4 import BeautifulSoup

# NVD_NIST_URL = "https://nvd.nist.gov/"
# nvd_nist_response = get(nvd_nist_url)
# nist_soup = BeautifulSoup(nvd_nist_response.text, 'html.parser')
# nist_cyber_data = nist_soup.find_all('div',{"id": "latestVulnsArea"})
# print(cve_top20_ul[0].li.p.text)

class CyberScrape:
    NVD_NIST_URL = "https://nvd.nist.gov/"
    IT_DEVICE_KEYWORDS = ["linux","Linux", "windows", "Windows","macintosh", "server", "cisco", "fortinet", "palo alto", "IBM", "Juniper"]
    ICS_DEVICE_KEYWORDS = ["PLC", "SCADA", "HMI", "Rockwell", "Schneider", "Siemens", "Yokogawa", "General Electric",
                          "Omron", "Mitsubishi", "ABB", "Honeywell"]
    IT_APPLICATION_KEYWORDS = ["VMware", "hypervisor", "citrix", "frotigate", "VPN", "SIEM", "Guardium",
                               "QRadar", "antivirus", "RSA"]
    OT_APPLICATION_KEYWORDS = ["RSLogix", "Wonderware"]
    VULN_KEYWORDS = ["DDOS", "DDoS", "DOS", "DoS", "Privilege Escalation", "Remote Execution", "XSS","(XSS)", "Injection", "Memory"]
    ALL_KEYWORDS = IT_DEVICE_KEYWORDS+ICS_DEVICE_KEYWORDS+IT_APPLICATION_KEYWORDS+OT_APPLICATION_KEYWORDS+VULN_KEYWORDS
    
    def __init__(self, url, tag, id_class, id_class_name):
        """
        Initialises the CyberScrape instance to start the web scrapping.
        Args:
            url (string): The URL to be scrapped
            tag (string): The first tag we are interested to locate, where our data resides
            id_class (string): "id" or "class"
            id_class_name (string): Name of the "id" or "class"
            
        eg: Suppose the data we want from the page lives in a html `div` tag with the `id` of `latestVulnsArea`, 
        ie: <div id="latestVulnsArea">, then our tag="div", id_class="id" and id_class_name="latestVulnsArea"
        """
        self.url = url
        self.tag = tag
        self.id_class = id_class
        self.id_class_name = id_class_name
    
    def scrape_url(self):
        """
        Scrapes the URL
        Returns:
            url_cyber_data (list[string]): The uncleaned scraped data from the URL
        """
        url_response = get(self.url)
        url_soup = BeautifulSoup(url_response.text, 'html.parser')
        url_cyber_data = url_soup.find_all(self.tag,{self.id_class: self.id_class_name})
        return url_cyber_data
    
    def nvd_nist_vulns(self, url_cyber_data):
        """
        Clean the URL data by extracting the important parts. The important information lives in the `p` tags which is 
        in the `ul` tag with the`id` of `latestVulns`. 
        
        Args:
            url_cyber_data (list[string]): The uncleaned scrapped web page data
        Returns:
            latest_vulns (list[string]): The cleaned data with CVE #, description, date discovered and CVSS 3.1/2
            scores
        """
        latest_vulns = []
        for i in url_cyber_data:
            cve_latest20_ul = i.find_all("ul", {"id": "latestVulns"})
        for i in cve_latest20_ul:
            cve_latest20_p = i.find_all("p")
        for i in range(len(cve_latest20_p)):
            latest_vulns.append(cve_latest20_p[i].text)
        return latest_vulns

    def nvd_nist_vulns_reformatted(self, nist_cve_data, cve_number, cve_description, vuln_severity):
        """
        Reformats the nist cve data to a differently formatted dictionary.
        Args:
            nist_cve_data (dict): Contains the CVE number as the key. The values include:  [Vulnerable keyword detected,
                                                                                            The vulnerable keyword,
                                                                                            Number of vulnerable keywords,
                                                                                            Version number]
            eg: {'CVE-2020-11735': [False, [], 0, ['4.4.0']], 
                 'CVE-2020-15324': [False, [], 0, ['3.1.0', '3.1.1']], 
                 'CVE-2020-15415': [False, [], 0, ['1.5.1,']], 
                 'CVE-2020-13657': [False, [], 0, ['20.4']], 
                 'CVE-2020-4024': [True, ['(XSS)'], 1, ['8.5.5,', '8.6.0', '8.8.2,', '8.9.0', '8.9.1']]}
            
            cve_number (list): A list of 20 recent cves
            cve_description(list): A list of 20 recent cve description
            vuln_severity (list[list(string)]): A list containing the CVSS 3.1/2 scores. Output of the vulns_level method
        Returns:

        """
        nist_cve = cve_number
        nist_cvss = []
        nist_descript = cve_description
        nist_affect_ver = []
        nist_warning_keywords_detected = []
        vulns = {}

        for key, value in nist_cve_data.items():
            nist_affect_ver.append(value[3]) #value[3] gives the vulnerable version
            nist_warning_keywords_detected.append(value[0]) #Look at eg above in method

        for i in range(len(vuln_severity)):
            nist_cvss.append(vuln_severity[i][1]) #gets the V3.1 CVSS score

        vulns["nist_cve"] = nist_cve
        vulns["nist_cvss"] = nist_cvss
        vulns["nist_descript"] = nist_descript
        vulns["nist_affect_ver"] = nist_affect_ver
        vulns["nist_keyword_warning"] = nist_warning_keywords_detected
        return vulns
    
    def vulns_level(self, cve_latest20_vulns):
        """
        Gets the latest 20 CVE vulnerability severities
        Args:
            cve_latest20_vulns (list(string)): Most recent 20 vulnerabilities with CVE #, description, date discovered
            and CVSS 3.1/2 scores
        Returns:
            vuln_severity (list[list(string)]): A list containing the CVSS 3.1/2 scores
            eg:
                [['V3.1:', '8.1', 'HIGH', 'V2:', '5.8', 'MEDIUM'],
                 ['V3.1:', '4.4', 'MEDIUM', 'V2:', '2.1', 'LOW'],
                 ['V3.1:', '6.1', 'MEDIUM', 'V2:', '4.3', 'MEDIUM']]      
        """
        vuln_severity = []
        for i in range(1,len(cve_latest20_vulns),2):
            vuln_severity.append(cve_latest20_vulns[i].split())
#             print(cve_top20_vulns[i].split())
        return vuln_severity

    def detect_vuln_keywords(self, keywords, cve_latest20_vulns, detect_only_vulnerables=True):
        """
        Detect if the new CVEs contain any keywords that are worth noting.
        Args:
            keywords (list): A list of keywords that generates alert interests
            cve_latest20_vulns (list[string]): The latest 20 CVE vulnerability description along with the CVSS scores     
        Returns:
            vulns_cves(dict): A dictionary containing the CVE # as the key and 
            potentially_vulnerable status/detected keywords/number of detected keywords/
            application version number as the value.
            
            eg: {'CVE-2020-6640': [True, ['(XSS)'], 1, []],
                 'CVE-2020-4191': [True, ['IBM', 'Guardium', 'IBM'], 3, ['11.1', '174852.']],
                 'CVE-2020-4183': [True, ['IBM', 'Guardium'], 2, ['11.1']],
                 'CVE-2020-4193': [True, ['IBM', 'Guardium', 'IBM'], 3, ['11.1', '174857.']],
                 'CVE-2020-4509': [True, ['IBM', 'QRadar', 'SIEM', 'Injection', 'IBM'], 5, ['7.3', '7.4', '18236...']]}

            cve_number (list): A cve number list of all nvd nist 20 vulnerabilities
            eg: ['CVE-2020-11735', 'CVE-2020-15324', 'CVE-2020-15415', 'CVE-2020-13657', 'CVE-2020-4024', 'CVE-2020-15311', 'CVE-2020-7664', 'CVE-2020-7668', 'CVE-2020-7667', 'CVE-2020-15395', 'CVE-2020-15393', 'CVE-2020-15006', 'CVE-2020-11074', 'CVE-2020-15314', 'CVE-2020-15319', 'CVE-2020-4452', 'CVE-2020-15320', 'CVE-2020-9659', 'CVE-2019-4704', 'CVE-2020-5588']

            cve_description (list): A cve description list of all nvd nist 20 vulnerabilities in the same order as the cve number
        """
        START = 2 #This is where the CVE number ends
        STOP = -7 #This is where the CVE publishing date information starts
        potentially_vulnerable = False
        keyword_hits = 0
        vuln_cves = {}
        vulns = {}
        temp = []
        detected_keywords = []
        version_number = []
        cve_description = []
        cve_number = []
        for i in range(0,len(cve_latest20_vulns),2):
            temp.append(cve_latest20_vulns[i])
            vulns[cve_latest20_vulns[i].split()[0]] = cve_latest20_vulns[i].split()[START:STOP]
            cve_number.append(cve_latest20_vulns[i].split()[0])
            cve_description.append(cve_latest20_vulns[i].splitlines()[2].strip())
        
        for key, value in vulns.items():
            for i in value:
                if "." in i and re.search('[a-zA-Z]', i) == None : #Checks if the description contains a version #. Contains a "." and contains no alphabets
                    version_number.append(i)
                if i in keywords:
                    keyword_hits += 1
                    detected_keywords.append(i)
#                     print(i, keyword_hits,detected_keywords)
                    potentially_vulnerable = True
            if potentially_vulnerable == True:
                vuln_cves[key] = [True,detected_keywords, keyword_hits, version_number]
            if detect_only_vulnerables != True and potentially_vulnerable != True:
                vuln_cves[key] = [False,detected_keywords, keyword_hits, version_number]
            potentially_vulnerable = False
            keyword_hits = 0
            detected_keywords = []
            version_number = []
 
        return vuln_cves, cve_number, cve_description

class PostgresCyberScrape(CyberScrape):
    POSTGRES_SEC_URL = "https://www.postgresql.org/support/security/"

    # def __init__(self):
    #     super().__init__(url=None,tag=None,id_class=None,id_class_name=None)

    def postgres_vulns(self, url_cyber_data):
        """
        Scrapes the postgres security website
        Args:
            url_cyber_data (string): Web contentof the POSTGRES_SEC_URL
        Returns:
            vulns (dict): Vulnerabilities containing, cve, affected version, fixed version, cvss and vulnerability descriptions.
        """
        postgres_vulns_td = []
        postgres_cve = []
        postgres_affect_ver = []
        postgres_fixed_ver = []
        postgres_cvss = []
        postgres_descript = []
        vulns = {}
        postgres_vulns_tbody = url_cyber_data[0].find_all("tbody")
        for i in postgres_vulns_tbody:
            postgres_vulns_tr = i.find_all("tr")

        for i in postgres_vulns_tr:
            postgres_vulns_td.append(i.find_all("td"))
        
        for i in postgres_vulns_td:
            postgres_cve.append(i[0].find_all("nobr")[0].text)
            postgres_affect_ver.append(i[1].text)
            postgres_fixed_ver.append(i[2].text)
            postgres_cvss.append(i[3].find_all("a")[0].text)
            postgres_descript.append(i[4].text)

        # print(postgres_cve)
        # print(postgres_affect_ver)
        # print(postgres_fixed_ver)
        # print(postgres_cvss)
        # print(postgres_descript)
        vulns["postgres_cve"] = postgres_cve
        vulns["postgres_affect_ver"] = postgres_affect_ver
        vulns["postgres_fixed_ver"] = postgres_fixed_ver
        vulns["postgres_cvss"] = postgres_cvss
        vulns["postgres_descript"] = postgres_descript
        return vulns

class MongoScrape(CyberScrape):

    MONGO_SEC_URL = "https://www.mongodb.com/alerts"

    def mongo_vulns(self, url_cyber_data):
        # print(url_cyber_data)
        mongo_vulns_td = []
        mongo_cve = []
        mongo_affect_ver = []
        mongo_fixed_ver = []
        mongo_component = []
        mongo_descript = []
        vulns = {}
        mongo_vulns_tbody = url_cyber_data[0].find_all("tbody")
        # print(mongo_vulns_tbody)
        for i in mongo_vulns_tbody:
            mongo_vulns_tr = i.find_all("tr")
        for i in mongo_vulns_tr:
            mongo_vulns_td.append(i.find_all("td"))
        for i in mongo_vulns_td:
            print(mongo_vulns_td)
            mongo_cve.append(i[5].find_all("p").text)
            mongo_affect_ver.append(i[3].find_all("p").text)
            mongo_fixed_ver.append(i[4].find_all("p").text)
            mongo_component.append(i[1].find_all("p").text)
            mongo_descript.append(i[2].find_all("p").text)
        # print(postgres_cve)
        # print(postgres_affect_ver)
        # print(postgres_fixed_ver)
        # print(postgres_cvss)
        # print(postgres_descript)
        vulns["mongo_cve"] = mongo_cve
        vulns["mongo_affect_ver"] = mongo_affect_ver
        vulns["mongo_fixed_ver"] = mongo_fixed_ver
        vulns["mongo_descript"] = mongo_descript
        vulns["mongo_component"] = mongo_component
        print(vulns)
        return vulns

if __name__ == '__main__':
    nvd_nist_cve = CyberScrape(CyberScrape.NVD_NIST_URL,"div","id","latestVulnsArea")
    nvd_nist_scraped_cyber_data = nvd_nist_cve.scrape_url()
    latest_20_vulns = nvd_nist_cve.nvd_nist_vulns(nvd_nist_scraped_cyber_data)
    # print(f'latest_20_vulns: {latest_20_vulns}')
    latest_20_severity = nvd_nist_cve.vulns_level(latest_20_vulns)
    # latest_20_severity
    exposed_to_new_vuln = nvd_nist_cve.detect_vuln_keywords(CyberScrape.ALL_KEYWORDS, latest_20_vulns, False)
    # print(exposed_to_new_vuln)
    nvd_nist_vulns = nvd_nist_cve.nvd_nist_vulns_reformatted(exposed_to_new_vuln[0],exposed_to_new_vuln[1],exposed_to_new_vuln[2],latest_20_severity)
    print(nvd_nist_vulns)
    # postgres_sec_info = PostgresCyberScrape(PostgresCyberScrape.POSTGRES_SEC_URL, "div", "id", "pgContentWrap")
    postgres_sec_info = PostgresCyberScrape(PostgresCyberScrape.POSTGRES_SEC_URL, "table", "class", "table table-striped")
    postgres_sec_info_scraped = postgres_sec_info.scrape_url()
    # print(postgres_sec_info.postgres_vulns(postgres_sec_info_scraped))

    # mongo_sec_info = MongoScrape(MongoScrape.MONGO_SEC_URL, "div", "id", "security-related")
    # mongo_sec_info_scraped = mongo_sec_info.scrape_url()
    # mongo_sec_info.mongo_vulns(mongo_sec_info_scraped)
