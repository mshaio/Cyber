"""
Let's web scrape for some cyber security related data that might be useful
Potential sites: https://nvd.nist.gov/
               : cvedetails
"""
import re
from requests import get
from bs4 import BeautifulSoup

# NVD_NIST_URL = "https://nvd.nist.gov/"
# nvd_nist_response = get(nvd_nist_url)
# nist_soup = BeautifulSoup(nvd_nist_response.text, 'html.parser')
# nist_cyber_data = nist_soup.find_all('div',{"id": "latestVulnsArea"})
# print(cve_top20_ul[0].li.p.text)

class CyberScrape:
    NVD_NIST_URL = "https://nvd.nist.gov/"
    IT_DEVICE_KEYWORDS = ["linux","Linux", "windows", "Windows","macintosh", "server", "cisco", "fortinet", "palo alto", "IBM", "Juniper"]
    ICS_DEVICE_KEYWORDS = ["PLC", "SCADA", "HMI", "Rockwell", "Schneider", "Siemens", "Yokogawa", "General Electric",
                          "Omron", "Mitsubishi", "ABB", "Honeywell"]
    IT_APPLICATION_KEYWORDS = ["VMware", "hypervisor", "citrix", "frotigate", "VPN", "SIEM", "Guardium",
                               "QRadar", "antivirus", "RSA"]
    OT_APPLICATION_KEYWORDS = ["RSLogix", "Wonderware"]
    VULN_KEYWORDS = ["DDOS", "DDoS", "DOS", "DoS", "Privilege Escalation", "Remote Execution", "XSS","(XSS)", "Injection", "Memory"]
    ALL_KEYWORDS = IT_DEVICE_KEYWORDS+ICS_DEVICE_KEYWORDS+IT_APPLICATION_KEYWORDS+OT_APPLICATION_KEYWORDS+VULN_KEYWORDS
    
    def __init__(self, url, tag, id_class, id_class_name):
        """
        Initialises the CyberScrape instance to start the web scrapping.
        Args:
            url (string): The URL to be scrapped
            tag (string): The first tag we are interested to locate, where our data resides
            id_class (string): "id" or "class"
            id_class_name (string): Name of the "id" or "class"
            
        eg: Suppose the data we want from the page lives in a html `div` tag with the `id` of `latestVulnsArea`, 
        ie: <div id="latestVulnsArea">, then our tag="div", id_class="id" and id_class_name="latestVulnsArea"
        """
        self.url = url
        self.tag = tag
        self.id_class = id_class
        self.id_class_name = id_class_name
    
    def scrape_url(self):
        """
        Scrapes the URL
        Returns:
            url_cyber_data (list[string]): The uncleaned scraped data from the URL
        """
        url_response = get(self.url)
        url_soup = BeautifulSoup(url_response.text, 'html.parser')
        url_cyber_data = url_soup.find_all(self.tag,{self.id_class: self.id_class_name})
        return url_cyber_data
    
    def nvd_nist_vulns(self, url_cyber_data):
        """
        Clean the URL data by extracting the important parts. The important information live in the `p` tags which is 
        in the `ul` tag with the`id` of `latestVulns`. 
        
        Args:
            url_cyber_data (list[string]): The uncleaned scrapped web page data
        Returns:
            latest_vulns (list[string]): The cleaned data with CVE #, description, date discovered and CVSS 3.1/2
            scores
        """
        latest_vulns = []
        for i in url_cyber_data:
            cve_latest20_ul = i.find_all("ul", {"id": "latestVulns"})
        for i in cve_latest20_ul:
            cve_latest20_p = i.find_all("p")
        for i in range(len(cve_latest20_p)):
            latest_vulns.append(cve_latest20_p[i].text)
        return latest_vulns
    
    def vulns_level(self, cve_latest20_vulns):
        """
        Gets the latest 20 CVE vulnerability severities
        Args:
            cve_latest20_vulns (list(string)): Most recent 20 vulnerabilities with CVE #, description, date discovered
            and CVSS 3.1/2 scores
        Returns:
            vuln_severity (list[list(string)]): A list containing the CVSS 3.1/2 scores
            eg:
                [['V3.1:', '8.1', 'HIGH', 'V2:', '5.8', 'MEDIUM'],
                 ['V3.1:', '4.4', 'MEDIUM', 'V2:', '2.1', 'LOW'],
                 ['V3.1:', '6.1', 'MEDIUM', 'V2:', '4.3', 'MEDIUM']]      
        """
        vuln_severity = []
        for i in range(1,len(cve_latest20_vulns),2):
            vuln_severity.append(cve_latest20_vulns[i].split())
#             print(cve_top20_vulns[i].split())
        return vuln_severity

    def detect_vuln_keywords(self, keywords, cve_latest20_vulns):
        """
        Detect if the new CVEs contain any keywords that are worth noting.
        Args:
            keywords (list): A list of keywords that generates alert interests
            cve_latest20_vulns (list[string]): The latest 20 CVE vulnerability description along with the CVSS scores     
        Returns:
            vulns_cves(dict): A dictionary containing the CVE # as the key and 
            potentially_vulnerable status/detected keywords/number of detected keywords/
            application version number as the value.
            
            eg: {'CVE-2020-6640': [True, ['(XSS)'], 1, []],
                 'CVE-2020-4191': [True, ['IBM', 'Guardium', 'IBM'], 3, ['11.1', '174852.']],
                 'CVE-2020-4183': [True, ['IBM', 'Guardium'], 2, ['11.1']],
                 'CVE-2020-4193': [True, ['IBM', 'Guardium', 'IBM'], 3, ['11.1', '174857.']],
                 'CVE-2020-4509': [True, ['IBM', 'QRadar', 'SIEM', 'Injection', 'IBM'], 5, ['7.3', '7.4', '18236...']]}
        """
        START = 2 #This is where the CVE number ends
        STOP = -7 #This is where the CVE publishing date information starts
        potentially_vulnerable = False
        keyword_hits = 0
        vuln_cves = {}
        vulns = {}
        temp = []
        detected_keywords = []
        version_number = []
        for i in range(0,len(cve_latest20_vulns),2):
            temp.append(cve_latest20_vulns[i])
            vulns[cve_latest20_vulns[i].split()[0]] = cve_latest20_vulns[i].split()[START:STOP]
#             print(cve_latest20_vulns[i])
        
        for key, value in vulns.items():
            for i in value:
                if "." in i and re.search('[a-zA-Z]', i) == None : #Checks if the description contains a version #. Contains a "." and contains no alphabets
                    version_number.append(i)
                if i in keywords:
                    keyword_hits += 1
                    detected_keywords.append(i)
#                     print(i, keyword_hits,detected_keywords)
                    potentially_vulnerable = True
            if potentially_vulnerable == True:
                vuln_cves[key] = [True,detected_keywords, keyword_hits, version_number]
            potentially_vulnerable = False
            keyword_hits = 0
            detected_keywords = []
            version_number = []
            
        return vuln_cves
    
if __name__ == '__main__':
    nvd_nist_cve = CyberScrape(CyberScrape.NVD_NIST_URL,"div","id","latestVulnsArea")
    nvd_nist_scraped_cyber_data = nvd_nist_cve.scrape_url()
    latest_20_vulns = nvd_nist_cve.nvd_nist_vulns(nvd_nist_scraped_cyber_data)
    # print(latest_20_vulns[4])
    latest_20_severity = nvd_nist_cve.vulns_level(latest_20_vulns)
    latest_20_severity
    exposed_to_new_vuln = nvd_nist_cve.detect_vuln_keywords(CyberScrape.ALL_KEYWORDS, latest_20_vulns)
    print(exposed_to_new_vuln)