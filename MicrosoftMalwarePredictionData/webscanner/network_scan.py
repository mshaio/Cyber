import os

class NetworkScanner:
     
     BROADCAST_ADDR = "255"
     SUBNET = "/24"

     def __init__(self, ip_address, port=None):
         self.ip_address = ip_address
         self.port = port


     def get_devices_on_network(self, nmap_options, arp_options):
        # threading.Timer(12.0, get_devices_on_network,(options, ip_address)).start()
        THIRD_OCTET = 3
        first_3_ip_octet = self.ip_address.split(".")[:THIRD_OCTET]
        command = "ping " + first_3_ip_octet[0] + "." + first_3_ip_octet[1] + "." + first_3_ip_octet[2] + "." + NetworkScanner.BROADCAST_ADDR
        process = os.popen(command)
        command = "nmap " + nmap_options + " " + self.ip_address + NetworkScanner.SUBNET
        process = os.popen(command)
        command = "arp " + arp_options #"arp -a -n"
        process = os.popen(command)
        arp_output = str(process.read())[:-1] #Removes the space at the end
        # print(arp_output)
        return arp_output

     def get_correct_index(self, formatted_arp_output):
         """
         Gets the index of the ips that don't return with 'incomplete' from arp -a
         Args:
            formatted_arp_output (list(string)): arp output split by new line
            eg: ['? (10.0.0.1) at 5c:76:95:d2:29:56 on en0 ifscope [ethernet]', 
                '? (10.0.0.96) at e4:e7:49:c4:56:7e on en0 ifscope [ethernet]']

         Returns:
            ip_index (list(int)): Index of ip addresses that don't return 'incomplete' via an arp scan
         """
         ip_index = []
         index = 0
         for i in formatted_arp_output:
             if 'incomplete' not in i:
                 ip_index.append(index)
             index +=1
         return ip_index

     def format_to_get_ip(self, arp_output):
         formatted_arp_output = arp_output.splitline()
         ips = []
         ip_index = get_correct_index(formatted_arp_output)
         for i in ip_index:
             #ips.append(re.search('\(([^)]+)', arp_result[i]).groups(1)[0])
             ip_data = re.search('\(([^)]+)', formatted_arp_output[int(i)]) #Get the data between brackets ()
             if 'incomplete' not in ip_data.group(1):
                 ips.append(ip_data.group(1))
         return ips


def get_local_ip():
    command = "ipconfig getifaddr en0"
    process = os.popen(command)
    output = str(process.read())[:-1] #Removes the space at the end
    return output



local_scanner = NetworkScanner(get_local_ip())
network_result = local_scanner.get_devices_on_network("-sn", "-a -n")
print(network_result[:-1])