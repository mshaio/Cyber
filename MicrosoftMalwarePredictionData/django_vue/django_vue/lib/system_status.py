import psutil
import torch

from devices.models import System

class SystemStatus:

    def __init__(self,percpu):
        self.percpu = percpu

    def get_cpu_percent(self):
        """
        Retunrs all the cpu cores' useage percentage. All logical cores, not just the physical cores.
        Args:  
            None
        Returns (tensor): The cpu usage percentage
                      eg: tensor([59.6000, 21.3000, 56.9000, 18.0000])
        """
        return torch.tensor(psutil.cpu_percent(interval=None, percpu=self.percpu))

    def get_cpu_time_percent(self):
        """
        Provides cpu utilization percentages. eg: scputimes(user=3.9, nice=0.0, system=3.0, idle=93.1)
        Args:
            None
        Returns (tensor): Returns a single tensor containig user_time, system_time and idle_time
                      eg: tensor([25.6000,  8.0000,  69.0000])

        """
        cpu_time_percent = psutil.cpu_times_percent(interval=None, percpu=False)
        user_time = torch.tensor(cpu_time_percent.user)
        system_time = torch.tensor(cpu_time_percent.system)
        idle_time = torch.tensor(cpu_time_percent.idle)
        return torch.stack((user_time,system_time,idle_time))
    
    def get_cpu_frequency(self):
        """
        Returns current cpu frequency
        Args:
            None
        Returns (tensor): The current cpu frequency of each cpu
                      eg: tensor([2300]) for a single cpu
        """
        cpu_frequencies = []
        for i in psutil.cpu_freq(percpu=True):
            cpu_frequencies.append(torch.tensor(i.current))
        return torch.tensor(cpu_frequencies)

    def get_cpu_avg_load(self):
        """
        Return the average system load over the last 1, 5 and 15 minutes
        Args:
            None
        Returns (tensor): A tensor containing the cpu load percentage for the past 1, 5, and 15 minutes
                      eg: tensor([45.0317, 41.5405, 42.1875])
        """
        return torch.tensor([x / psutil.cpu_count() * 100 for x in psutil.getloadavg()])

    def get_network_packets_sent(self):
        """
        Get the number of network packets sent
        Args:
            None
        Returns (tensor): The total number of packets sent. eg: tensor([19562053])
        """
        return torch.tensor(psutil.net_io_counters().packets_sent).unsqueeze(dim=0)

    def get_network_packets_received(self):
        """
        Get the number of network packets recieved
        Args:
            None
        Returns (tensor): The total number of packets recieved. eg: tensor([44302451])
        """
        return torch.tensor(psutil.net_io_counters().packets_recv).unsqueeze(dim=0)

system_stats = SystemStatus(False)
print(system_stats.get_network_packets_received())

system = System()
system.cpu_percent = float(system_stats.get_cpu_percent())
system.cpu_frequency = int(system_stats.get_cpu_frequency())
system.cpu_avg_load = float(system_stats.get_cpu_avg_load()[0]) #Average 1min cpu load
##### Two below needs to be fixed. Change model to a float
system.network_packets_sent = int(system_stats.get_network_packets_sent()/1000000)
system.network_packets_received = int(system_stats.get_network_packets_received()/1000000)

system, created = System.objects.update_or_create(cpu_percent=system.cpu_percent,
                                                  cpu_frequency=system.cpu_frequency,
                                                  cpu_avg_load=system.cpu_avg_load,
                                                  network_packets_sent=system.network_packets_sent,
                                                  network_packets_received=system.network_packets_received)