import torch
import torch.nn as nn
import torch.nn.functional as F
import time
import psutil
from system_status import *

class CyberNN(nn.Module):

    def __init__(self, first_layer_size):
        super().__init__()
        second_layer_size = round(first_layer_size / 3.75)
        third_layer_size = round(second_layer_size * 1.333)
        self.fc1 = nn.Linear(in_features=first_layer_size, out_features=second_layer_size)
        self.fc2 = nn.Linear(in_features=second_layer_size, out_features=third_layer_size)
        self.out = nn.Linear(in_features=third_layer_size, out_features=1)

    def forward(self, t):
        t = t.flatten(start_dim=1)
        t = F.relu(self.fc1(t))
        t = F.relu(self.fc2(t))
        t = self.out(t)
        return t

system_stats = SystemStatus(True)
print(0,psutil.cpu_percent(interval=None, percpu=False))
for i in range(1000):
    network_packets_sent = 0
    initial_packets_count = system_stats.get_network_packets_sent()
    cpu_percent = system_stats.get_cpu_percent()
    cpu_time_percent = system_stats.get_cpu_time_percent()
    cpu_frequency = system_stats.get_cpu_frequency()
    cpu_avg_load = system_stats.get_cpu_avg_load()
    print(0,torch.tensor(psutil.cpu_percent(interval=None, percpu=True)))
    print(1,cpu_percent)
    print(2,cpu_time_percent)
    print(3,cpu_frequency)
    print(4,cpu_avg_load)
    time.sleep(60)
    network_packets_sent = system_stats.get_network_packets_sent() - initial_packets_count
    print(5,network_packets_sent)
    nn_input = torch.cat([cpu_percent,cpu_time_percent,cpu_frequency,cpu_avg_load,network_packets_sent])
    print(f'nn input: {nn_input}')
    break
print(123)

